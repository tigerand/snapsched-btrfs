#!/bin/bash

# program to perform backups
# called by cron.


# this program will ostensibly be able to fix situations where a snapshot
# was failed to be sent, maybe due to network problems.  missing snapshots
# should be sent, and that includes all of them if none have ever been sent.

export PRE=/usr/local

exec 2>&1

export OSILENT=

# load the library routines
. $PRE/lib/snapsched/snapsched-funcs

# send a single snapshot to the backup host
cp_snap()
{
	local SARGS="$1"
	local SSH_C="$2"
	local SVOL="$3"
	local RECV_DST="$4"
	local C
	local ES

	shift;shift;shift

	# bring in the clones
	for C in "${SNAP_SENT_LST[@]}" ; do
		SARGS+=" -c $C"
	done

	# if this is the first snap EVER to be sent, then
	# SARGS will be the the null string, so the entire snap will be sent.
	# otherwise, previously sent snaps will be mentioned as possible
	# clone sources, and btrfs can supposedly figure out the parent
	# relationship.  however, if it fails to do that because the snapshots
	# have been screwed with, then this will fail.

	echo "sending $SVOL ..." 2>/dev/stderr

	# might need an eval here to get SARGS to work right
	eval btrfs send $SARGS "$SVOL" | $SSH_C btrfs rec "$RECV_DST"
	ES=$?

	return $ES
}


# first arg is snapshot source

NSRC="$1"
SSRC="$NSRC"
shift

# second arg is FREQ
FREQ=$1
shift

if [ \( -z "$NSRC" \) -o \( -z "$FREQ" \) ] ; then
	serr "`basename $0`: called with wrong arguments: NSRC='$NSRC' FREQ='$FREQ'"
	exit 1
fi

# validate NSRC arg, and read in config file
# no usage message, since this is called by cron.  supposedly.
_ssched_validate_nsrc SSRC "" ||
	exit 1

# iffy check, but technically the user shouldn't specify an interval
# that isn't scheduled for snapping
if [ "${CONFIG[SSRC_$NSRC%`_ssched_int2u $FREQ`_MSC]}" -eq 0 ] ; then
	# there's nothing to backup
	exit 0
fi

SSRC=${CONFIG[SNAP_MOUNT_DIR]}/$SSRC
BFSNAME=${CONFIG["SSRC_${NSRC}%BACKUPFS"]}
BHOST1=${CONFIG["SSRC_${NSRC}%BACKUPHOST1"]}
BHOST1Z=${CONFIG["SSRC_${NSRC}%BACKUPHOST1_Z"]}


# don't spam email for hourlies
if [ "$FREQ" != hourly ] ; then
	OSILENT=
	:
else
	OSILENT=--quiet
	:
fi

omsg "$freq backup job for '$NSRC' at `date '+%F %T'`"


_ssched_mount_rootvol ${CONFIG[SNAP_MOUNT_DIR]} || {
	ES=$?
	serr "Unable to mount root volume '${CONFIG[SNAP_MOUNT_DIR]}': $ES"
	if [ ! -d "${CONFIG[SNAP_MOUNT_DIR]}" ] ; then
		serr "Directory  '${CONFIG[SNAP_MOUNT_DIR]}' does not exist."
	elif [ "$ES" -eq 4 ] ; then
		serr "Perhaps it needs to be configured in /etc/fstab?  Snapsched requires that."
	fi
	exit 1
}

# don't let the mount point be unmounted in the middle of this
cd ${CONFIG[SNAP_MOUNT_DIR]}

TBASE="${CONFIG["SNAP_MOUNT_DIR"]}/${CONFIG["SNAP_BASE_DIR"]}/$NSRC"

BSDIR=$BFSNAME/`hostname`/$NSRC

# whether or not to use compression with ssh.  generally makes xfers take
# roughly 2.5 times longer on 1Gb ethernet or faster connections
if $BHOST1Z ; then
	SSHZ_ARG=-C
else
	SSHZ_ARG=
fi

# make directories on bhost
ssh -x $BHOST1 mkdir -p /$BSDIR 2>/dev/null

declare -i SX RX
declare -a SSNAPS RSNAPS

# get the list of src snaps for this nsrc/intval
# LSLIST=`\ls $TBASE | tr '\n' ' '`

LINT_EGREP_PAT=`tr ' ' '|' <<<"${LESSER_INTS[$FREQ]}"`

SX=`_ssched_bsub_list "$NSRC" "" SSNAPS "${CONFIG[SNAP_MOUNT_DIR]}"`

if [ "$SX" -eq 0 ] ; then
	# nothing to do?
	exit 0
fi

# get the list of backup snaps for this nsrc/intval
RX=`_ssched_bsub_list "$NSRC" "ssh -x $BHOST1" RSNAPS $BFSNAME`

declare -a SNAP_SENT_LST
declare -a SNAP_XFER_LST
declare -i X=0 S

PREV_LS=

# create a list of sent snaps
for RSSTR in "${RSNAPS[@]}" ; do
	RUID=${RSSTR% *}
	for SSSTR in "${SSNAPS[@]}" ; do
		SUID=${SSSTR% *}
		if [ "$RUID" = "$SUID" ] ; then
			SNAP_SENT_LST+=(${SSSTR#* })
			break
		fi
	done
done


# create a list of snaps to send
for SSSTR in "${SSNAPS[@]}" ; do
	SUID=${SSSTR% *}
	for RSSTR in "${RSNAPS[@]}" ; do
		RUID=${RSSTR% *}
		if [ "$RUID" = "$SUID" ] ; then
			continue 2
		fi
	done
	SNAP_XFER_LST+=(${SSSTR#* })
done

# send the snaps
for SNAP in "${SNAP_XFER_LST[@]}" ; do
	D=`egrep -o "hourly|daily|weekly|monthly" <<<"$SNAP"`
	ssh -x $BHOST1 mkdir -p $BSDIR/$D
	cp_snap "" "ssh -x $SSHZ_ARG $BHOST1" "$SNAP" "$BSDIR/$D" &&
		SNAP_SENT_LST+=("$SNAP")
done


# release the mount point
cd - >/dev/null

_ssched_umount_rootvol ${CONFIG[SNAP_MOUNT_DIR]}

exit $ES
