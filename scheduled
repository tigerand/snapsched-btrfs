#!/bin/bash


export PRE=/usr/local

MAILTO=root
# exec 2>&1

# create the scheduled snapshots.  called by cron.

# load the library routines
. $PRE/lib/snapsched/snapsched-funcs

# first arg is snapshot source

NSRC="$1"
# one day, name of source (NSRC) and actual dir name (CONFIG["SSRC_$NSRC"])
# will be separate values
SSRC="$NSRC"
shift

# second arg is frequency
FREQ=$1
shift

declare -u freq

freq=$FREQ

# validate NSRC arg, and read in config file
# no usage message, since this is called by cron.  supposedly.
_ssched_validate_nsrc SSRC "" ||
	exit 1

SSRC=${CONFIG[SNAP_MOUNT_DIR]}/$SSRC

# don't spam email for hourlies
if [ "$FREQ" != hourly ] ; then
	OSILENT=
	:
else
	OSILENT=--quiet
	:
fi

omsg "$freq snapshot job for '$NSRC' at `date '+%F %T'`"

case $FREQ in
	hourly)
		L=H
		DATESTR=`date +%Y-%m-%d`
		INTSTR=`date +%H`
		;;
	daily)
		L=D
		DATESTR=`date +%Y-%m`
		INTSTR=`date +%d`
		;;
	weekly)
		L=W
		DATESTR=`date +%Y-%m`
		INTSTR=`date +%W`
		;;
	monthly)
		L=M
		DATESTR=`date +%Y`
		INTSTR=`date +%m`
		;;
	*)
		serr "$0: invalid freq argument '$FREQ'."
		exit 1
		;;
esac

MAX_SCNT=${CONFIG[SSRC_${NSRC}%${L}_MSC]}

if [ "$MAX_SCNT" -lt 1 ] ; then
	# max snapcount of 0 means no snapping
	exit 0
fi

SNAME="${DATESTR}_${INTSTR}"
TBASE="${CONFIG["SNAP_MOUNT_DIR"]}/${CONFIG["SNAP_BASE_DIR"]}/$NSRC/$FREQ"
TDIR="${TBASE}/$SNAME"

_ssched_mount_rootvol ${CONFIG[SNAP_MOUNT_DIR]} || {
	serr "Unable to mount root volume '${CONFIG[SNAP_MOUNT_DIR]}'"
	serr "Perhaps it needs to be added in /etc/fstab?  Snapsched requires that."
	exit 1
}

# make necessary directories, if any; check for existing with same name

if [ ! -d "$TBASE" ] ; then
	mkdir -p "$TBASE" || {
		serr "Failed to create the snapsched storage directory $TBASE"
		serr "Cannot create snapshot '$FREQ/$SNAME'."
		_ssched_umount_rootvol ${CONFIG[SNAP_MOUNT_DIR]}
		exit 1
	}
fi

if [ -d "$TDIR" ] ; then
	serr -e "\tFAIL: Snapshot target directory already exists!"
	cd $TBASE
	serr -e "\t`ls -ld $SNAME`"
	serr "Cannot create snapshot '$FREQ/$SNAME'."
	exit 1
fi

# the question here is, do we continue to make new snap shots during
# this period, and just delete the oldest snapshot in this period, or do
# we just stop making new snapshots?

# for now, delete oldest then make new snapshot
# should really delete in a loop until below MSC - recovery
# from oversnapping condition
if [ `echo ${TBASE}/* | wc -w` -ge "$MAX_SCNT" ] ; then

	# remove oldest first
	OLDSNAP=`\ls $TBASE | head -1`

	omsg "Deleting:"
	omsg -e "\tReached max snap count ($MAX_SCNT) for '$NSRC' '$FREQ', hence"

	MTMP=$TMPBASE/msc.snap.del.$NSRC.$FREQ.$OLDSNAP
	_ssched_mktemp $MTMP

	#echo "btrfs sub del -c $TBASE/$OLDSNAP" | sed 's/^/\t/' > $MTMP
	btrfs sub del -c "$TBASE/$OLDSNAP" 2>&1 | sed 's/^/\t/' > $MTMP

	ES=${PIPESTATUS[0]}
	if [ "$ES" -ne 0 ] ; then
		serr -e "\tFAILure deleting the oldest snapshot '$TBASE/$OLDSNAP': $ES"
		serr < $MTMP
		_ssched_umount_rootvol ${CONFIG[SNAP_MOUNT_DIR]}
		_ssched_rmtemp $MTMP
		exit $ES
	fi
	omsg < $MTMP
	# output a blank line for formatting
	omsg ""
fi

# snap it
omsg "Snapping: '${SSRC#${CONFIG[SNAP_MOUNT_DIR]}/}' -> '$FREQ/$SNAME'"

# pause databases
_ssched_pause_dbs $NSRC
PES=$?

MTMP=$TMPBASE/sub.snap.$NSRC.$FREQ.$SNAME
_ssched_mktemp `basename $MTMP`

#echo -e "\tbtrfs sub snap -r '$SSRC' '$TDIR'"
# echo "btrfs sub snap -r $SSRC $TDIR" | sed 's/^/\t/' >$MTMP
btrfs sub snap -r "$SSRC" "$TDIR" 2>&1 | sed 's/^/\t/' >$MTMP

ES=${PIPESTATUS[0]}

# if [ "$PES" -eq 0 ] ; then
	# unpause databases
	_ssched_unpause_dbs $NSRC
# fi

if [ "$ES" -ne 0 ] ; then
	serr "Some sort of failure creating snapshot '$FREQ/${DATESTR}_${INTSTR}'"
	serr <$MTMP
fi

_ssched_rmtemp $MTMP

_ssched_umount_rootvol ${CONFIG[SNAP_MOUNT_DIR]}

exit $ES
